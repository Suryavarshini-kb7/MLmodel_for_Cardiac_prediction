# -*- coding: utf-8 -*-
"""Heart disease prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e6ZaImp-tLZDmeC1iYCT-ba1tJVty9Pq
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/DATASET/heart.csv")
print(df)

df.head(5)

df.tail(5)

df.describe()

df.info()

df.isnull()

df.isnull().sum()

df['target'].value_counts()

from sklearn.model_selection import train_test_split
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

print(X)

print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

print(X_train)

print(X_test)

X_train.shape

y_train.shape

X_test.shape

y_test.shape

"""TRAINING THE MODEL USING LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression

model=LogisticRegression(max_iter=1000)
model.fit(X_train,y_train)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train_scaled, y_train)

"""EVALUATION OF MODEL"""

from sklearn.metrics import accuracy_score

X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,y_train)
print("Accuracy of Train data:",training_data_accuracy)

X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)
print("Accuracy of Test data:",test_data_accuracy)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,X_test_prediction)
cm

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['YES','NO'],
            yticklabels=['YES','NO'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,X_test_prediction))

"""TRAINING THE MODEL USING DECISION TREE"""

from sklearn.tree import DecisionTreeClassifier

model1 = DecisionTreeClassifier( max_depth=7)
model1.fit(X_train,y_train)

"""EVALUATION OF MODEL1"""

from sklearn.metrics import accuracy_score

X_train_prediction1=model1.predict(X_train)
training_data_accuracy1=accuracy_score(X_train_prediction1,y_train)
print("Accuracy of Train data:",training_data_accuracy1)

X_test_prediction=model1.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)
print("Accuracy of Test data:",test_data_accuracy)

from sklearn.metrics import confusion_matrix
cm1=confusion_matrix(y_test,X_test_prediction)
cm1

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['YES','NO'],
            yticklabels=['YES','NO'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

"""TRAINING THE MODEL USING RANDOM FOREST"""

from sklearn.ensemble import RandomForestClassifier
model2 = RandomForestClassifier(max_depth=7)
model2.fit(X_train, y_train)

from sklearn.metrics import accuracy_score

X_train.shape

X_train_prediction2=model2.predict(X_train)

training_data_accuracy2=accuracy_score(X_train_prediction2,y_train)
print("Accuracy of Train data:",training_data_accuracy2)

X_test_prediction=model2.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)
print("Accuracy of Test data:",test_data_accuracy)

from sklearn.metrics import confusion_matrix
cm2=confusion_matrix(y_test,X_test_prediction)
cm2

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm2,
            annot=True,
            fmt='g',
            xticklabels=['YES','NO'],
            yticklabels=['YES','NO'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

"""TRAINING THE MODEL USING SUPPORT VECTOR MACHINE

"""

from sklearn import svm
clf = svm.SVC()
clf.fit(X_train, y_train)

from sklearn.metrics import accuracy_score

X_train_prediction3=clf.predict(X_train)

training_data_accuracy3=accuracy_score(X_train_prediction3,y_train)
print("Accuracy of Train data:",training_data_accuracy3)

X_test_prediction=clf.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)
print("Accuracy of Test data:",test_data_accuracy)

from sklearn.metrics import confusion_matrix
cm3=confusion_matrix(y_test,X_test_prediction)
cm3

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm3,
            annot=True,
            fmt='g',
            xticklabels=['YES','NO'],
            yticklabels=['YES','NO'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

"""TRAINING THE MODEL USING KNN"""

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import accuracy_score

neigh = KNeighborsClassifier()
neigh.fit(X_train, y_train)

X_train_prediction4=neigh.predict(X_train)

training_data_accuracy4=accuracy_score(X_train_prediction4,y_train)
print("Accuracy of Train data:",training_data_accuracy4)

X_test_prediction=neigh.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)
print("Accuracy of Test data:",test_data_accuracy)

from sklearn.metrics import confusion_matrix
cm4=confusion_matrix(y_test,X_test_prediction)
cm4

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm4,
            annot=True,
            fmt='g',
            xticklabels=['YES','NO'],
            yticklabels=['YES','NO'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

new_input=[[45., 0., 2., 135., 333., 1., 0., 135., 1., 6.5, 3., 3., 2.]]
output= model2.predict(new_input)
print(output)

new_input=[[38., 1., 3., 120., 231., 0., 1., 182., 1., 3.8, 1., 0., 3.]]
output= model2.predict(new_input)
print(output)